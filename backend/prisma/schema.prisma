// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model users {
  id           Int            @id @default(autoincrement())
  username     String
  email        String         @unique
  avatar       String?
  password     String
  phone_number String         @unique
  is_valid     Boolean        @default(false)
  pets         pets[]
  created_at   DateTime       @default(now())
  updated_at   DateTime       @updatedAt
  appointments appointments[]
  estimates    estimates[]
}

model pets {
  id           Int            @id @default(autoincrement())
  name         String
  avatar       String         @default("no photo")
  birth        String
  gender       String
  weight       String
  type         pet_type
  in_neutered  Boolean        @default(false)
  vaccinated   Boolean        @default(false)
  created_at   DateTime       @default(now())
  updated_at   DateTime       @updatedAt
  users        users?         @relation(fields: [user_id], references: [id])
  user_id      Int?
  appointments appointments[]
  estimates    estimates[]
}

model appointments {
  id         Int      @id @default(autoincrement())
  status     status   @default(request)
  date       String
  details    String
  vets       vets?    @relation(fields: [vet_id], references: [id])
  vet_id     Int?
  users      users?   @relation(fields: [user_id], references: [id])
  user_id    Int?
  pets       pets?    @relation(fields: [pet_id], references: [id])
  pet_id     Int?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model estimates {
  id                Int                 @id @default(autoincrement())
  request_comment   String
  status            status              @default(request)
  users             users?              @relation(fields: [user_id], references: [id])
  user_id           Int?
  pets              pets?               @relation(fields: [pet_id], references: [id])
  pet_id            Int?
  created_at        DateTime            @default(now())
  updated_at        DateTime            @updatedAt
  response_estimate response_estimate[]
}

model response_estimate {
  id               Int        @id @default(autoincrement())
  vets             vets?      @relation(fields: [vet_id], references: [id])
  vet_id           Int?
  response_comment String     
  estimates        estimates? @relation(fields: [estimate_id], references: [id])
  estimate_id      Int?
  created_at       DateTime   @default(now())
  updated_at       DateTime   @updatedAt
}

model vets {
  id                Int                 @id @default(autoincrement())
  hospital_id       String              @unique
  password          String
  name              String
  location          String
  number            String
  created_at        DateTime            @default(now())
  updated_at        DateTime            @updatedAt
  appointments      appointments[]
  response_estimate response_estimate[]
}

model major_medical_subjects {
  id                     Int                      @id @default(autoincrement())
  subject                String
  created_at             DateTime                 @default(now())
  updated_at             DateTime                 @updatedAt
  minor_medical_subjects minor_medical_subjects[]
}

model minor_medical_subjects {
  id                     Int                     @id @default(autoincrement())
  subject                String
  created_at             DateTime                @default(now())
  updated_at             DateTime                @updatedAt
  major_medical_subjects major_medical_subjects? @relation(fields: [major_id], references: [id])
  major_id               Int?
}

enum status {
  request
  confirm
  cancel
}

enum pet_type {
  cat
  dog
}